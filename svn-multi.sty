%    \begin{macrocode}
\def\svnmulti@version{v2.4c}
%    \end{macrocode}
%
% \subsection{Package Header}
% \subsubsection*{Package Identification}
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1999/12/01]
\ProvidesPackage{svn-multi}[2011/08/20 \svnmulti@version\space SVN Keywords for multi-file LaTeX documents]
%    \end{macrocode}
%
% \subsubsection*{Options}
% Declaration of options and internal switches.
%    \begin{macrocode}
\RequirePackage{kvoptions}

\SetupKeyvalOptions{%
  family = svn-multi,
  prefix = @svnmulti@
}
\newif\if@svnmulti@anygraphic
\newif\if@svnmulti@autoload
\newif\if@svnmulti@autokw
\newif\if@svnmulti@autokwall

\DeclareVoidOption{old}{%
  \@svnmulti@verbatimtrue
  \@svnmulti@groupsfalse
  \@svnmulti@externalfalse
  \@svnmulti@graphicsfalse
  \@svnmulti@pgfimagesfalse
  \@svnmulti@autoloadfalse
  \@svnmulti@tablefalse
  \@svnmulti@filehooksfalse
  \@svnmulti@subgroupsfalse
}
\DeclareVoidOption{all}{%
  \@svnmulti@verbatimtrue
  \@svnmulti@groupstrue
  \@svnmulti@externaltrue
  \@svnmulti@graphicstrue
  \@svnmulti@pgfimagestrue
  \@svnmulti@autoloadtrue
  \@svnmulti@tabletrue
  \@svnmulti@filehookstrue
  \@svnmulti@subgroupstrue
}
\DeclareBoolOption[true]{verbatim}
\DeclareBoolOption[false]{groups}
\DeclareBoolOption[false]{external}
\DeclareBoolOption[false]{subgroups}
\DeclareBoolOption[false]{graphics}
\DeclareBoolOption[false]{pgfimages}
\DeclareStringOption{autoload}[true]
\DeclareBoolOption[false]{table}
\DeclareBoolOption[false]{filehooks}
\DeclareStringOption[false]{autokw}[all]

\ExecuteOptions{old}
\ProcessKeyvalOptions{svn-multi}
%    \end{macrocode}
%
% Enable dependent options:
%    \begin{macrocode}
\def\svn@depoption#1{%
  \csname if@svnmulti@#1\endcsname\else
  \message{svn-multi: Required option '#1' enabled.}%
  \csname @svnmulti@#1true\endcsname
  \fi
}

\if@svnmulti@groups
  \svn@depoption{filehooks}
\fi
\if@svnmulti@external
  \svn@depoption{filehooks}
\fi
\if@svnmulti@subgroups
  \svn@depoption{groups}
  \svn@depoption{filehooks}
\fi
\if@svnmulti@graphics
  \svn@depoption{external}
  \svn@depoption{autoload}
  \svn@depoption{filehooks}
\fi
\if@svnmulti@pgfimages
  \svn@depoption{external}
  \svn@depoption{autoload}
  \svn@depoption{filehooks}
\fi
\if@svnmulti@autoload
  \svn@depoption{external}
  \svn@depoption{filehooks}
\fi
\if@svnmulti@table
  \svn@depoption{groups}
  \svn@depoption{filehooks}
\fi
%    \end{macrocode}
%
% Check if \opt{autoload} was set explicitly and obey the value.
%    \begin{macrocode}
\ifx\@svnmulti@autoload\@undefined
\else
\ifx\@svnmulti@autoload\empty
\else
\def\svn@temp{true}
\ifx\@svnmulti@autoload\svn@temp
  \@svnmulti@autoloadtrue
  \svn@depoption{external}
  \svn@depoption{filehooks}
\else
\def\svn@temp{false}
\ifx\@svnmulti@autoload\svn@temp
  \if@svnmulti@autoload
  \PackageWarning{svn-multi}{Option 'autoload' disabled.}
  \fi
  \@svnmulti@autoloadfalse
\else
  \PackageError{svn-multi}%
    {Invalid value for 'autoload' option: '\@svnmulti@autoload'^^J%
     ! Only 'true','false' or empty (='true') are allowed!}{}%
\fi\fi\fi\fi
%    \end{macrocode}

% Set \opt{autokw} modes:
%    \begin{macrocode}
\def\svn@temp{true}
\ifx\@svnmulti@autokw\svn@temp
  \@svnmulti@autokwtrue
  \@svnmulti@autokwalltrue
  \svn@depoption{filehooks}
\fi
\def\svn@temp{all}
\ifx\@svnmulti@autokw\svn@temp
  \@svnmulti@autokwtrue
  \@svnmulti@autokwalltrue
  \svn@depoption{filehooks}
\fi
\def\svn@temp{ext}
\ifx\@svnmulti@autokw\svn@temp
  \@svnmulti@autokwtrue
  \@svnmulti@autokwallfalse
\fi
\def\svn@temp{false}
\ifx\@svnmulti@autokw\svn@temp
  \@svnmulti@autokwfalse
  \@svnmulti@autokwallfalse
\fi
%    \end{macrocode}

% General switch if any graphic option is enabled:
%    \begin{macrocode}
\if@svnmulti@graphics
  \@svnmulti@anygraphictrue
\fi
\if@svnmulti@pgfimages
  \@svnmulti@anygraphictrue
\fi
%    \end{macrocode}
%

% \subsection{General Internal Macros}
% Some internal used macro which don't fit in any other section.
%
% \begin{macro}{\svn@ifempty}[1]{string}
% Tests if the given argument is empty. If so the first of the next two token
% will be expanded, the second one otherwise.
%    \begin{macrocode}
\def\svn@ifempty#1{%
  \begingroup
  \edef\svn@temp{#1}%
  \ifx\svn@temp\empty
    \endgroup
    \expandafter
    \@firstoftwo
  \else
    \endgroup
    \expandafter
    \@secondoftwo
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@ifequal}[2]{string a}{string b}
% Tests if the given arguments are identical, \eg same strings. If so the first
% of the next two token will be expanded, the second one otherwise.
%    \begin{macrocode}
\def\svn@ifequal#1#2{%
  \begingroup
  \edef\svn@stringa{#1}%
  \edef\svn@stringb{#2}%
  \@onelevel@sanitize\svn@stringa
  \@onelevel@sanitize\svn@stringb
  \ifx\svn@stringa\svn@stringb
    \endgroup
    \expandafter
    \@firstoftwo
  \else
    \endgroup
    \expandafter
    \@secondoftwo
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@ifvalidrev}[1]{macro name}
% Checks if the given macro (by name) is a valid revision, \ie defined and
% not equal to the init value.
%    \begin{macrocode}
\def\svn@ifvalidrev#1{%
  \begingroup
  \@ifundefined{#1}%
    {\let\svn@temp\svn@revinit}%
    {\expandafter\edef
     \expandafter\svn@temp\expandafter{\csname #1\endcsname}}%
  \ifnum\svn@temp=\svn@revinit\relax
    \endgroup
    \expandafter
    \@secondoftwo
  \else
    \endgroup
    \expandafter
    \@firstoftwo
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@ifeof}[1]{input file handle}
% Checks if the input file is at the end-of-file (or not open).
%    \begin{macrocode}
\def\svn@ifeof#1{%
  \ifeof#1%
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@ifonlyone}[1]{group name}
% Checks if there is only one element in the given group file list.
% It looks whether there is a comma in the list.
%    \begin{macrocode}
\def\svn@ifonlyone#1{%
  \expandafter\expandafter\expandafter
  \svn@@ifonlyone\csname @svng@#1@files\endcsname,\relax
}

\def\svn@@ifonlyone#1,#2\relax{%
  \svn@ifempty{#2}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@input}[1]{file name/path}
% Macro to load |.svx| and |.svt| files.  The current keyword group is saved
% away and restored after the |.svx| file is loaded.  The macros |\IfFileExists|
% with |\@@input| are used because |\InputIfFileExists| got redefined by the
% \pkg{filehook} package and there is no need to use \pkg{filehook} for this files.
%    \begin{macrocode}
\def\svn@input#1{%
  \begingroup
    \let\svn@rg\svn@g
    \IfFileExists{#1}{\@@input #1\relax}{}%
    \global\let\svn@g\svn@rg
  \endgroup
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@inputsvx}[1]{file name/path without extension}
% Used to save and restore file keywords when reading |.svx| files.
% The normal catcodes are restored to avoid issues in special situations
% regarding input of verbatim files
% (e.g.\ \cs{lstinputlisting} from the \pkg{listings} package) or other
% cases where catcodes might have changes (e.g.\ `|%|' in |.dtx| files).
%    \begin{macrocode}
\def\svn@inputsvx#1{%
  \svn@pushfilestack
  \begingroup
  \svn@normalcatcodes
  \svn@input{#1.svx}%
  \endgroup
  \svn@popfilestack
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@normalcatcodes}
% Sets the default catcodes.
%    \begin{macrocode}
\def\svn@normalcatcodes{%
  \catcode`\\=0\relax
  \catcode`\{=1\relax
  \catcode`\}=2\relax
  \catcode`\$=3\relax
  \catcode`\&=4\relax
  \catcode`\^^M=5\relax
  \catcode`\#=6\relax
  \catcode`\^=7\relax
  \catcode`\_=8\relax
  \catcode`\ =10\relax
  \catcode`\@=12\relax
  \catcode`\~=13\relax
  \catcode`\%=14\relax
}
%    \end{macrocode}
% \end{macro}

% \subsection{Definition of init values}
% Initialisation of at least the revision to a numeric value is necessary to not
% break the |\ifnum| tests later in this package. The revision is initialised to
% -2, but will be set to 0 if an unexpanded |$||Rev:$| keyword is read. This way
% it can be tested if a file had any keyword macros or not.\par
% Note that there a two different macros for the document global keywords:\par
% The user level |\svn|\meta{kw} macros hold the global value and are only valid
% after a \LaTeX\ run. They are initialised here and defined in the |.aux|
% file which is read at the end of the package if it exists and written at the
% end of the document.\par
% The internal macros |\@svn@|\meta{kw} store the oldest (i.e. highest revision)
% keywords read so far from the \cs{svnid} and \cs{svnidlong} macros. They
% change during the document and are used to produce the values of the
% |\svn|\meta{kw} macros when the |.aux| file is written.\par
% Group wide macros are initialised when the group is first defined and have
% three different macros: \Macro\svng@<\/group>'@'<kw>\relax (defined in |.aux|),
% \Macro\@svng@<\/group>'@'<kw>\relax (accumulator) and also an access
% macro \Macro\svncg<\/group> which uses
% \Macro\svn@g<current group>'@'<kw>.
%    \begin{macrocode}
% Init values
\def\svn@revinit{-2}
\let\svnrev\svn@revinit     \let\@svn@rev\svn@revinit
\let\ifsvnmodified\@secondoftwo
\def\@svn@modified{@secondoftwo}%
\def\svndate{}              \def\@svn@date{}
\def\svnauthor{}            \def\@svn@author{}
\def\svnyear{0000}          \def\@svn@year{0000}
\def\svnmonth{00}           \def\@svn@month{00}
\def\svnday{00}             \def\@svn@day{00}
\def\svnhour{00}            \def\@svn@hour{00}
\def\svnminute{00}          \def\@svn@minute{00}
\def\svnsecond{00}          \def\@svn@second{00}
\def\svntimezonehour{+00}   \def\@svn@timezonehour{+00}
\def\svntimezoneminute{00}  \def\@svn@timezoneminute{00}
\def\svnmainurl{NOT SET}    \def\svnmainfilename{NOT SET}
\def\svnurl{} \def\svnfname{}
\def\svn@temp{}

\def\svn@pg{} \def\svn@g{} \def\svn@cg{\svn@g} \def\svn@rg{\svn@pg}
\let\@svng@@files\empty

\def\svn@initfile{%
  \global\let\svnfilerev\svn@revinit
  \global\let\ifsvnfilemodified\@secondoftwo
  \gdef\svnfiledate{}%
  \gdef\svnfileauthor{}%
  \gdef\svnfileyear{0000}%
  \gdef\svnfilemonth{00}%
  \gdef\svnfileday{00}%
  \gdef\svnfilehour{00}%
  \gdef\svnfileminute{00}%
  \gdef\svnfilesecond{00}%
  \gdef\svnfiletimezonehour{+00}%
  \gdef\svnfiletimezoneminute{00}%
  \gdef\svnfileurl{}%
  \gdef\svnfilefname{}%
  \gdef\svnfiledir{}%
}
\svn@initfile

\newif\ifsvn@modified
%    \end{macrocode}

% \subsection{Auto-Keywords}

% Special care must be taken for the line feed character, otherwise it causes an 
% error if \opt{autokw} is disabled.
%    \begin{macrocode}
\begingroup
\@makeother\^^L
\if@svnmulti@autokw
\gdef\svne@ff{^^L}
\fi
\endgroup
%    \end{macrocode}

%    \begin{macrocode}
\if@svnmulti@autokw
%    \end{macrocode}
% 
%    \begin{macrocode}
\newread\svne@read
%    \end{macrocode}

% \begin{macro}{\svne@catcodes}
% Sets the catcodes for verbatim input reading. Also removes the end-of-line 
% character.
% \begin{macrocode}
\newcommand*{\svne@catcodes}{%
  \let\do\@makeother
  \endlinechar=-1%
  \dospecials
  \do0\do1\do2\do3\do4%
  \do5\do6\do7\do8\do9%
  \do\:\do\^^L%
  \do\<\do\>\do\*\do\.\do\-%
  \do\/\do\[\do\]\do\`\do\'\do\"%
  \def\do##1{\catcode`##1=11\relax}%
  \do\A\do\B\do\C\do\D\do\E\do\F
  \do\G\do\H\do\I\do\J\do\K\do\L
  \do\M\do\N\do\O\do\P\do\Q\do\R
  \do\S\do\T\do\U\do\V\do\X\do\Y\do\Z
  \do\a\do\b\do\c\do\d\do\e\do\f
  \do\g\do\h\do\i\do\j\do\k\do\l
  \do\m\do\n\do\o\do\p\do\q\do\r
  \do\s\do\t\do\u\do\v\do\x\do\y\do\z
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svne@readline}[1]{macro}
% Reads the next line to the provided macro and handles the end-of-file case 
% correctly.
%    \begin{macrocode}
\def\svne@readline#1{%
  \ifeof\svne@read
    \def#1{}%
  \else
    \read\svne@read to #1\relax
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svne@gobblerest}
% Gobbles the rest of the current entry.
%    \begin{macrocode}
\def\svne@gobblerest{%
  \ifeof\svne@read
    \let\next\relax
  \else
    \read\svne@read to \svn@temp
    \ifx\svn@temp\svne@ff
      \let\next\relax
    \else
      \let\next\svne@gobblerest
    \fi
  \fi
  \next
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svne@endread}
% Stops the reading process of the entries file.
%    \begin{macrocode}
\def\svne@endread{%
  \closein\svne@read
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svne@parseentriesfile}[1]{file path}
%    \begin{macrocode}
\newcommand*{\svne@parseentriesfile}[1]{%
  \begingroup
    \let\next\relax
%    \end{macrocode}
% Open the format file to read the version number. If this file does not exists
% (true for recent svn versions) a valid default value is used and the true
% version number is read from the |entries| file.
%    \begin{macrocode}
    \def\svne@version{8}%
    \openin\svne@read=#1format\relax
    \ifeof\svne@read\else
      \svne@readline\svne@version
      \closein\svne@read
    \fi
%    \end{macrocode}
% Check the format version:
%    \begin{macrocode}
      \ifnum\svne@version>7\relax
%    \end{macrocode}
% Now open the entries file and read the version number from there again.
%    \begin{macrocode}
        \openin\svne@read=#1entries\relax
        \ifeof\svne@read\else
          \svne@readline\svne@version
%    \end{macrocode}
% Check the version and call the parse macros if OK:
%    \begin{macrocode}
          \ifnum\svne@version>7\relax
            \def\next{\svne@parsedirentry
                      \svne@parseentries}%
          \else
            \closein\svne@read
          \fi
        \fi
      \fi
    \next
  \endgroup
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svne@parsedirentry}
% Reads the first entry which is the directory entry and sets its URL as base 
% URL for all other entries.
% \begin{macrocode}
\newcommand*{\svne@parsedirentry}{%
  \svne@readline\svne@name
  \svne@readline\svne@kind
  \svn@ifempty{\svne@name}%
    {\svn@ifequal{\svne@kind}{dir}%
      {%
        {\svne@readline\svn@temp}%
        \svne@readline\svne@baseurl
        \svne@gobblerest
      }{}%
    }{}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svne@scandate}
% \begin{macro}{\svne@scandate@}
% Parses the date from the svn entries file. Special care is taken to handle the 
% case when the TeX parsing would fail. The catcode of the characters '|-|', 
% '|:|', '|.|' used inside the date is set explicitly to ensure the correct 
% value.
%
% \begin{macrocode}
\begingroup

\@makeother\-
\@makeother\:
\@makeother\.

\gdef\svne@scandate#1{%
  \expandafter\svne@scandate@#1\empty
  0000-00-00T00:00:00.00000Z\empty\empty
}

\gdef\svne@scandate@#1-#2-#3T#4:#5:#6.#7\empty#8\empty{%
  \xdef\svnfileyear{#1}%
  \gdef\svnfilemonth{#2}%
  \gdef\svnfileday{#3}%
  \gdef\svnfilehour{#4}%
  \gdef\svnfileminute{#5}%
  \gdef\svnfilesecond{#6}%
  \gdef\svnfiletimezonehour{+00}%
  \gdef\svnfiletimezoneminute{00}%
  \gdef\svnfiledate{#1-#2-#3 #4:#5:#6Z}%
  \def\svne@date{#1-#2-#3 #4:#5:#6Z}%
}

\endgroup
%    \end{macrocode}
% \end{macro}
% \end{macro}

% \begin{macro}{\svne@parseentries}
%    \begin{macrocode}
\newcommand*{\svne@parseentries}{%
  \svn@ifeof{\svne@read}%
  {}%
  {%
    \svne@readline\svne@name
    \@onelevel@sanitize\svne@name
    \svn@ifeof{\svne@read}%
    {}%
    {%
    \svne@readline\svne@kind
    \svn@ifequal{\svne@kind}{file}%
      {%
      \svne@readline\svn@temp
      \svne@readline\svn@temp
      \svne@readline\svn@temp
      \svne@readline\svn@temp
      \svne@readline\svn@temp
      \svne@readline\svn@temp
      \svne@readline\svne@date
      \svne@readline\svne@rev
      \svne@readline\svne@author
      %\@onelevel@sanitize\svne@date
      \svne@scandate{\svne@date}%
      \edef\svne@url{\svne@baseurl/\svne@name}%
      \svne@handleentry
      }{}%
    \svne@gobblerest
    \svne@parseentries
    }%
  }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svne@handleentry}
% This macro is called for every entry except the first one which stands for the 
% directory. The VC data is located in the following macros: \csi{svne@name}, 
% \csi{svne@date}, \csi{svne@rev}, \csi{svne@author}, \csi{svne@url}.
%
% This implementation sets the correct keywords and calls the update macro to 
% emulate the behaviour of \cs{svnidlong}. Then the \cs{svne@endread} macro is 
% used to stop the file reading.
%    \begin{macrocode}
\def\svne@handleentry{%
  \ifx\svne@rev\empty
    \let\svne@rev\svn@revinit
  \fi
  \svn@ifequal{\svne@name}{\svnfilefname}%
    {%
      \message{^^J%
        Read from '.svn/entries' file:^^J%
        Filename:  \svne@name^^J%
        Date:      \svne@date^^J%
        Revision:  \svne@rev^^J%
        Author:    \svne@author^^J%
        HeadURL:   \svne@url^^J%
        ^^J%
      }%
      \svnkwdef{Filename}{\svne@name}%
      \svnkwdef{Date}{\svne@date}%
      \svnkwdef{Revision}{\svne@rev}%
      \svnkwdef{Author}{\svne@author}%
      \svnkwdef{HeadURL}{\svne@url}%
      \@svn@updateid{\svne@rev}{\svne@date}{\svne@author}{\svne@url}%
      \svne@endread
    }{}%
}%
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnegetfile}[1]{file path}
%    \begin{macrocode}
\def\svnegetfile#1{%
  \begingroup
    \svn@getfilename{#1}%
    \edef\svnfilefname{\svnfilefname}%
    \@onelevel@sanitize\svnfilefname
    \svne@catcodes
    \svne@parseentriesfile{\svnfiledir .svn/}%
    \svne@parseentriesfile{\svnfiledir _svn/}%
  \endgroup
}
%    \end{macrocode}
% \end{macro}

% Load keywords of main document at begin of the document body if option is set 
% to 'all'.
%    \begin{macrocode}
\if@svnmulti@autokwall
\AtBeginDocument{%
    \svnegetfile{\jobname.\currfile@mainext}%
}
\fi
%    \end{macrocode}

%    \begin{macrocode}
\fi
%    \end{macrocode}


% \subsection{Timezone macros}
% \begin{macro}{\svntimezone}
% \begin{macro}{\svnfiletimezone}
% \begin{macro}{\svncgtimezone}
% These macros return the global, file-local and current group time zones,
% respectively. Since v1.4 the minute part is returned as well and the macro
% removes manually added |00| after it to support older documents.
% \changes{v1.4}{2009/02/27}{Return now full timezone (hour + minute part).
% Manually added 00 minutes are removed.}
%    \begin{macrocode}
\def\svntimezone{\svntimezonehour\svntimezoneminute\svn@gobblezeros}
\def\svnfiletimezone{\svnfiletimezonehour\svnfiletimezoneminute\svn@gobblezeros}
\def\svncgtimezone{\svncgtimezonehour\svncgtimezoneminute}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}

% \begin{macro}{\svn@gobblezeros}
% \begin{macro}{\svn@gobblezeros@}
% This two cascaded macros remove a trailing |00| and are used by
% \cs{svnfiletimezone} and \cs{svntimezone}.
%    \begin{macrocode}
\def\svn@gobblezeros{%
  \futurelet\svn@nextchar\svn@gobblezeros@
}
\def\svn@gobblezeros@{%
  \let\@tempa=\relax
  \def\@tempb{0}%
  \ifx0\svn@nextchar
    \let\@tempa=\@gobbletwo
  \fi
  \@tempa
}
%    \end{macrocode}
% \end{macro}
% \end{macro}

% \begin{macro}{\svntime}
% \begin{macro}{\svnfiletime}
% \begin{macro}{\svncgtime}
% This macros simple use the hour, minute and second macros.
%    \begin{macrocode}
\def\svntime{\svnhour:\svnminute:\svnsecond}
\def\svnfiletime{\svnfilehour:\svnfileminute:\svnfilesecond}
\def\svncgtime{\svncghour:\svncgminute:\svncgsecond}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}

% \subsection{\textit{Today} macros}
% These macros use the |\today| macro to typeset the current date using the
% local language settings. Thanks and credit goes to Manuel P\'egouri\'e-Gonnard
% for suggesting this feature and for providing the code.
% \begin{macro}{\svntoday}
%    \begin{macrocode}
\newcommand*{\svntoday}{%
  \begingroup
    \year\svnyear \month\svnmonth \day\svnday
    \relax \today
  \endgroup
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\svnfiletoday}
%    \begin{macrocode}
\newcommand*{\svnfiletoday}{%
  \begingroup
    \year\svnfileyear \month\svnfilemonth \day\svnfileday
    \relax \today
  \endgroup
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\svncgtoday}
%    \begin{macrocode}
\newcommand*{\svncgtoday}{%
  \@ifundefined{svng@\svn@cg @year}{??}{%
    \begingroup
      \year\svncgyear \month\svncgmonth \day\svncgday
      \relax \today
    \endgroup
  }%
}%
%    \end{macrocode}
% \end{macro}

% \subsection{Id macros}
% \subsubsection{Normal Id}
% \begin{macro}{\svnid}
% Calls \cs{svnkwsave} with |\@svnidswtrue| so that the Id keyword will be
% parsed at the end of \cs{svnkwsave}.
%    \begin{macrocode}
\newcommand*{\svnid}{%
  \@svnidswtrue
  \svnkwsave
}
\newif\if@svnidsw
\@svnidswfalse
%    \end{macrocode}
% \end{macro}
%

% \begin{macro}{\svn@scanId}[2]{file name}{rest of id line}
% Ensures proper behaviour also for copied but not yet committed files which have 
% no date, time and author name. The revision is set to -1. So \meta{rest} is simply
% compared to `|-1|' and a fall-back text is supplied if needed.
%    \begin{macrocode}
\def\svn@scanId#1 #2\relax{%
  \begingroup
  \def\@tempa{#2}%
  \def\@tempb{-1}%
  \ifx\@tempa\@tempb
    \endgroup
    \svn@scanId@#1 -1 0000-00-00 00:00:00Z (uncommited)\relax
  \else
    \endgroup
    \svn@scanId@#1 #2\relax
  \fi
}
%    \end{macrocode}
% \end{macro}
%

% \begin{macro}{\svn@scanId@}[5]{file name}{revision}{date (YYYY-MM-DD)}{time
% (HH:MM:SSZ)}{author (username)}
% Scans svn Id (after it got parsed by \cs{svnkwsave}).  Awaits only Id value
% without leading `|Id:|' and a trailing |\relax| as end marker.  It calls
% \cs{@svn@scandate} to extract the date information and \cs{@svn@updateid} to
% update global Id values and also sets the appropriate keywords.
%    \begin{macrocode}
\def\svn@scanId@#1 #2 #3 #4 #5\relax{%
  \@svn@scandate{#3 #4}%
  \svnkwdef{Filename}{#1}%
  \svnkwdef{Date}{#3 #4}%
  \svnkwdef{Revision}{#2}%
  \svnkwdef{Author}{#5}%
  \@svn@updateid{\svnkw{Revision}}{\svnkw{Date}}{\svnkw{Author}}{\svnkw{URL}}%
}
%    \end{macrocode}
% \end{macro}
%

% \begin{macro}{\@svn@updateid}[4]{rev}{date}{author (username)}{url}
% We first define the expanded arguments to variables for the user.  The
% expansion is needed because the arguments content is mostly generic like
% |\svn@value| which can change very soon after this macro.
%    \begin{macrocode}
\def\@svn@updateid#1#2#3#4{%
  \begingroup
  \let\protect\@unexpandable@protect
  \xdef\svnfilerev{#1}%
  \ifsvn@modified
    \global\let\ifsvnfilemodified\@firstoftwo
  \else
    \global\let\ifsvnfilemodified\@secondoftwo
  \fi
  \xdef\svnfiledate{#2}%
  \xdef\svnfileauthor{#3}%
  \xdef\svnfileurl{#4}%
  \svn@getfilename\svnfileurl%
%    \end{macrocode}
% Then we check if the revision is non-empty (not yet expanded by subversion?)
% and larger then the current maximum value |\@svn@rev|.  If yes we save all
% value to save them in the |.aux|-file later.
%    \begin{macrocode}
  \ifx\svnfilerev\empty\else
    \ifnum\@svn@rev<\svnfilerev
      \xdef\@svn@rev{\svnfilerev}%
      \xdef\@svn@modified{\ifsvnfilemodified{@firstoftwo}{@secondoftwo}}%
      \xdef\@svn@date{\svnfiledate}%
      \xdef\@svn@author{\svnfileauthor}%
      \xdef\@svn@year{\svnfileyear}%
      \xdef\@svn@month{\svnfilemonth}%
      \xdef\@svn@day{\svnfileday}%
      \xdef\@svn@hour{\svnfilehour}%
      \xdef\@svn@minute{\svnfileminute}%
      \xdef\@svn@second{\svnfilesecond}%
      \xdef\@svn@timezonehour{\svnfiletimezonehour}%
      \xdef\@svn@timezoneminute{\svnfiletimezoneminute}%
      \xdef\@svn@url{\svnfileurl}%
      \xdef\@svn@fname{\svnfilefname}%
    \fi

    \if@svnmulti@groups
      \ifx\svn@g\empty\else
        \svn@updategroup{\svn@g}%
      \fi
      \if@svnmulti@subgroups
        \ifsvnsubgroups
          \svn@updategroup{\currfiledir\currfilebase}%
        \fi
      \fi
    \fi
  \fi
  \endgroup
}

\def\@svncg@save#1#2{%
  \expandafter\xdef\csname @svng@\svn@g @#1\endcsname{#2}%
}

%    \end{macrocode}
% \end{macro}
%

% \subsubsection{Long Id}
% \begin{macro}{\svnidlong}
% We clear the keyword value first to reduce the risk though bad user input.
%    \begin{macrocode}
\newcommand{\svnidlong}{%
  \svnkwdef{URL}{}%
  \svnkwdef{Date}{}%
  \svnkwdef{Revision}{0}%
  \svnkwdef{Author}{}%
%    \end{macrocode}
% Read arguments verbatim or non-verbatim.
%    \begin{macrocode}
  \if@svnmulti@verbatim
    \expandafter\svnidlong@readverb
  \else
    \expandafter\svnidlong@readargs
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\svnidlong@readverb}
% The following macros read the four arguments of |\svnidlong| one-by-one with
% verbatim mode deactivated between them to ignore all comments. The macro 
% |\@ifnextchar| is used to get rid of all spaces (and therefore comments) between
% the arguments. An error message is printed if a wrong syntax is discovered.
%    \begin{macrocode}
\def\svnidlong@readverb{%
  \@ifnextchar\bgroup
    {\svnidlong@readverb@\svnidlong@readverb@a}%
    {\PackageError{svn-multi}{Wrong syntax for \string\svnidlong}{}}%
}
%    \end{macrocode}
% Sets up verbatim mode and calls the macro given as an argument.
%    \begin{macrocode}
\def\svnidlong@readverb@#1{%
  \begingroup
  \svn@catcodes
  \catcode`\{=1\relax
  \catcode`\}=2\relax
  #1%
}
%    \end{macrocode}
% Reads first argument, ignores spaces and comments and calls next macro.
%    \begin{macrocode}
\def\svnidlong@readverb@a#1{%
  \endgroup
  \svnkwsave@read #1\relax
  \@ifnextchar\bgroup
    {\svnidlong@readverb@\svnidlong@readverb@b}%
    {\PackageError{svn-multi}{Wrong syntax for \string\svnidlong}{}}%
}
%    \end{macrocode}
% Reads second argument, ignores spaces and comments and calls next macro.
%    \begin{macrocode}
\def\svnidlong@readverb@b#1{%
  \endgroup
  \svnkwsave@read #1\relax
  \@ifnextchar\bgroup
    {\svnidlong@readverb@\svnidlong@readverb@c}%
    {\PackageError{svn-multi}{Wrong syntax for \string\svnidlong}{}}%
}
%    \end{macrocode}
% Reads third argument, ignores spaces and comments and calls next macro.
%    \begin{macrocode}
\def\svnidlong@readverb@c#1{%
  \endgroup
  \svnkwsave@read #1\relax
  \@ifnextchar\bgroup
    {\svnidlong@readverb@\svnidlong@readverb@d}%
    {\PackageError{svn-multi}{Wrong syntax for \string\svnidlong}{}}%
}
%    \end{macrocode}
% Reads last argument, scans date if not empty and calls the Id update macro.
%    \begin{macrocode}
\def\svnidlong@readverb@d#1{%
  \endgroup
  \svnkwsave@read #1\relax
  \ifx\svnkwDate\empty\else
    \@svn@scanlongdate{\svnkwDate}%
  \fi
  \@svn@updateid{\svnkw{Revision}}{\svnkw{Date}}%
  {\svnkw{Author}}{\svnkw{URL}}%
  \ignorespaces
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@catcodes}
% Changes all \TeX-special character to category ``other''. The newline aka
% return is changed to category ``ignore'' so line breaks are not taken as part
% of the verbatim arguments.
%    \begin{macrocode}
\if@svnmulti@verbatim
\def\svn@catcodes{%
  \let\do\@makeother
  \dospecials
  \catcode`\^^M9
  \catcode`\ 10
  \catcode`\{1
  \catcode`\}2
}
\else
  \def\svn@catcodes{}
\fi
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\svnidlong@readargs}[4]{Keyword 1}{Keyword 2}{Keyword 3}
% {Keyword 4}
% Calls sub macro for all four arguments and ends the catcode changes made
% by \cs{svnidlong}.
%    \begin{macrocode}
\def\svnidlong@readargs#1#2#3#4{%
    \svnkwsave@read #1\relax
    \svnkwsave@read #2\relax
    \svnkwsave@read #3\relax
    \svnkwsave@read #4\relax
  \endgroup
%    \end{macrocode}
% Now the update macros for date and id are called.
%    \begin{macrocode}
  \ifx\svnkwDate\empty\else
    \@svn@scanlongdate{\svnkwDate}%
  \fi
  \@svn@updateid{\svnkw{Revision}}{\svnkw{Date}}%
  {\svnkw{Author}}{\svnkw{URL}}%
  \ignorespaces
}%
%    \end{macrocode}
% \end{macro}

% \subsection{KeyWord Macros}
% \begin{macro}{\svnkwsave}
% Enabled verbatim mode and uses a sub macro to read the arguments afterwards.
%    \begin{macrocode}
\def\svnkwsave{%
  \begingroup
    \svn@catcodes
    \svnkwsave@readargs
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnkwsave@readargs}[1]{\$kw: value\$}
% Reads full argument, calls parse submacro and ends catcode changes.
% If \cs{svnkwsave} was called by \cs{svnid} scans the id keyword by calling the
% scan macro.
%    \begin{macrocode}
\gdef\svnkwsave@readargs#1{%
    \svnkwsave@read#1\relax
  \endgroup
  \if@svnidsw
    \ifx\svnkwId\empty\else
      \expandafter
      \svn@scanId\svnkwId\relax
      \@svnidswfalse
    \fi
  \fi
  \ignorespaces
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnkwsave@read}[1]{keyword line without surrounding \$ \$}
% Reads the full keyword and strips the dollars.
%    \begin{macrocode}
\begingroup
\if@svnmulti@verbatim
\catcode`\$=12
\fi
\gdef\svnkwsave@read $#1$\relax{%
  \svn@checkcolon#1:\relax
}
\endgroup
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnkwsave@parse}[2]{key}{value}
% Parse the keyword and save it away.
%    \begin{macrocode}
\begingroup
\catcode`\$=11
\gdef\svnkwsave@parse$#1:#2${%
  \expandafter\xdef\csname svnkw#1\endcsname{#2}%
}%
\endgroup
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnkwdef}[2]{key}{value}
% First we check if there is a `setter'-macro for the keyword called
% \cs{svnkwdef@}\meta{keyword}.
%    \begin{macrocode}
\newcommand{\svnkwdef}[2]{%
  \@ifundefined{svnkwdef@#1}%
%    \end{macrocode}
% If not we call the general macro \cs{svnkwdef@}.
%    \begin{macrocode}
    {\svnkwdef@{#1}{#2}}%
%    \end{macrocode}
% If yes we just call it with the value as argument.
%    \begin{macrocode}
    {\csname svnkwdef@#1\endcsname{#2}}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnkwdef@}[2]{key}{value}
% This macro defines the second argument under \cs{svnkw}\meta{1st argument}.
% The |\xdef| is used to expand the content first (needed for internal use) and
% make the definition globally.
%    \begin{macrocode}
\newcommand{\svnkwdef@}[2]{%
  \begingroup
  \let\protect\@unexpandable@protect
  \expandafter\xdef\csname svnkw#1\endcsname{#2}%
  \endgroup
}
%    \end{macrocode}
% Example: |\svnkwdef{Revision}{23}| will define |\svnkwRevision| as 23.
% \end{macro}

% \begin{macro}{\svnkwdef@Rev}
% \begin{macro}{\svnkwdef@Author}
% \begin{macro}{\svnkwdef@Date}
% \begin{macro}{\svnkwdef@URL}[1]{value}
% `Setter'-macros for single keywords, used by \cs{svnkwdef}.\\ These are needed
% to have have a common value for all alternative keyword names ala |Rev|,
% |Revision|, |LastChangedRevision|.
%
% The keywords |Author| and |Date| are just calling \cs{svnkwdef@} with a fixed
% first argument.  For the revision the value is checked if empty and then a 0
% is substituted. Also a temp counter is used to strip any trailing characters 
% like `M' which indicate an exported and modified file.
%    \begin{macrocode}
\def\svnkwdef@Rev#1{%
  \svn@ifempty{#1}%
    {\svnkwdef@{Rev}{0}}%
    {%
     \afterassignment\svnkwdef@Rev@
     \@tempcnta=#1\relax
    }%
}
\def\svnkwdef@Rev@#1\relax{%
  \svnkwdef@{Rev}{\the\@tempcnta}%
  \def\svn@temp{#1}%
  \if M\svn@temp\relax
    \global\svn@modifiedtrue
  \else
    \if *\svn@temp\relax
      \global\svn@modifiedtrue
    \else
      \global\svn@modifiedfalse
    \fi
  \fi
}
\def\svnkwdef@Author#1{\svnkwdef@{Author}{#1}}
\def\svnkwdef@Date#1{\svnkwdef@{Date}{#1}}
\def\svnkwdef@URL#1{\svnkwdef@{HeadURL}{#1}}
%    \end{macrocode}
% The long keywords are defined then as aliases of the short,\\
% first for writing
%    \begin{macrocode}
\let\svnkwdef@Revision=\svnkwdef@Rev
\let\svnkwdef@LastChangedRevision=\svnkwdef@Rev
\let\svnkwdef@LastChangedBy=\svnkwdef@Author
\let\svnkwdef@LastChangedDate=\svnkwdef@Date
%    \end{macrocode}
% and then for reading.
%    \begin{macrocode}
\def\svnkwRevision{\svnkwRev}
\def\svnkwLastChangedRevision{\svnkwRev}
\def\svnkwLastChangedBy{\svnkwAuthor}
\def\svnkwLastChangedDate{\svnkwDate}
\def\svnkwURL{\svnkwHeadURL}
%    \end{macrocode}
% So \eg |\svnkw{LastChangedRevision}| is always be the
% same as |\svnkw{Rev}|.
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}

% We define default values for normal keywords. Keyword |Filename| is the name
% given by |Id| and not a real keyword.
%    \begin{macrocode}
\svnkwdef{Rev}{0}
\svnkwdef{Date}{}
\svnkwdef{Author}{}
\svnkwdef{Filename}{}
\svnkwdef{HeadURL}{}
%    \end{macrocode}

% \begin{macro}{\svnkw}[1]{keyword name}
% Macro to get keyword value. Just calls \cs{svnkw}\meta{ARGUMENT} where
% the argument interpreted as text. So \eg |\svnkw{Date}| is the same as
% |svnkwDate| but this could be changed later so always use this interface
% to get the keyword values.
%
% \changes{v1.2}{2007/06/22}{Added warning when a wrong, maybe
% misspelled, keyword is given.}
%    \begin{macrocode}
\newcommand{\svnkw}[1]{%
  \@ifundefined{svnkw#1}%
    {\PackageWarning{svn-multi}{SVN keyword '#1' not defined (typo?)}}%
    {\csname svnkw#1\endcsname}%
}%
%    \end{macrocode}
% \end{macro}
%

% \subsection{Keyword check and strip macros}
% The following macros are used to test whether the given keywords are fully
% expanded or not.
% Subversion supports unexpanded keywords as input with or without colon and
% with or without trailing space(s), \ie a:~|$KW$|, b:~|$KW:$| or c:~|$KW: $|.
% To avoid \LaTeX{} syntax errors in this pre-commit state the keyword is
% checked by the following macros. Unexpanded keywords result in an empty value.
% Also leading and trailing spaces are removed.
%
% \begin{macro}{\svn@checkcolon}[2]{key}{potential value, might be empty}
% Checks if the keyword contains a colon. It is called by \cs{svnkwsave@read}
% with a trailing |:\relax| so that \#2 will be empty if there is no earlier
% colon or will hold the value with this trailing colon otherwise.
% The first case means that the keyword is unexpanded without colon (case a)
% which leads to an empty value. In the second case \cs{svn@stripcolon} is
% called to strip the colon and surrounding spaces. The final value is
% returned by |\svn@value|.
%    \begin{macrocode}
\def\svn@checkcolon#1:#2\relax{%
  \svn@ifempty{#2}%
    {\svnkwdef{#1}{}}%
    {\svn@stripcolon#2\relax\svnkwdef{#1}{\svn@value}}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@stripcolon}[1]{potential value}
% Strips the previous added colon (for \cs{svn@checkcolon}).
% The remaining argument is checked if it's empty (case b) or only a space
% (case c). Otherwise the keyword is expanded and \cs{svn@stripspace} is
% called to strip the spaces.
%    \begin{macrocode}
\def\svn@stripcolon#1:\relax{%
  \svn@ifempty{#1}%
    {\gdef\svn@value{}}%
    {\svn@ifequal{#1}{ }%
      {\gdef\svn@value{}}%
      {\svn@stripspace#1\relax\relax}%
    }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@stripspace}[2]{first character}{rest of string}
% Strips leading space if present and calls \cs{svn@striptrailingspace} to
% strip the trailing space.
%    \begin{macrocode}
\def\svn@stripspace#1#2\relax{%
  \svn@ifequal{#1}{ }%
    {\gdef\svn@value{#2}}%
    {\svn@striptrailingspace#1#2\relax}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@striptrailingspace}[1]{string}
% Strips trailing space using the macros parameter text. Must be called with
% |\relax| as end marker.
%    \begin{macrocode}
\def\svn@striptrailingspace#1 \relax{%
  \gdef\svn@value{#1}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@gdefverb}[1]{macro}
%    \begin{macrocode}
\def\svn@gdefverb#1{%
  \begingroup
    \def\svn@temp{#1}%
    \begingroup
      \if@svnmulti@verbatim
        \svn@catcodes
      \fi
      \svn@gdefverb@
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@defverb@}[1]{verbatim stuff}
%    \begin{macrocode}
\def\svn@gdefverb@#1{%
    \endgroup
    \expandafter\gdef\svn@temp{#1}%
  \endgroup
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@namegdefverb}[1]{macro name}
%    \begin{macrocode}
\def\svn@namegdefverb#1{%
  \begingroup
    \expandafter\def
    \expandafter\svn@temp
    \expandafter{\csname #1\endcsname}%
    \begingroup
      \if@svnmulti@verbatim
        \svn@catcodes
      \fi
      \svn@gdefverb@
}
%    \end{macrocode}
% \end{macro}


% \subsection{Date Macros}
% \begin{macro}{\@svn@scandate}[1]{date}
% Scans data information in Id keyword and saves them in macros.
%    \begin{macrocode}
\def\@svn@scandate#1{\@svn@scandate@#1\relax}

\def\@svn@scandate@#1-#2-#3 #4:#5:#6#7#8\relax{%
  \gdef\svnfileyear{#1}%
  \gdef\svnfilemonth{#2}%
  \gdef\svnfileday{#3}%
  \gdef\svnfilehour{#4}%
  \gdef\svnfileminute{#5}%
  \gdef\svnfilesecond{#6#7}%
  \gdef\svnfiletimezonehour{+00}%
  \gdef\svnfiletimezoneminute{00}% #8 always 'Z' for Zulu-time (UTC)
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\@svn@scanlongdate}[8]{Year}{Month}{Day}{Hour}{Minute}{Second}
% {Timezone}{Date description string (ignored)}
% Scans date information in Date keyword and saves them in macros.
%    \begin{macrocode}
\def\@svn@scanlongdate#1{\expandafter\@svn@scanlongdate@#1\relax}
%
\def\@svn@scanlongdate@#1-#2-#3 #4:#5:#6 #7 #8\relax{%
  \gdef\svnfileyear{#1}%
  \gdef\svnfilemonth{#2}%
  \gdef\svnfileday{#3}%
  \gdef\svnfilehour{#4}%
  \gdef\svnfileminute{#5}%
  \gdef\svnfilesecond{#6}%
  \@svn@parsetimezone#7\relax%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\@svn@parsetimezone}[5]{sign (+/-)}{hour first digit}{hour
% second digit}{minute first digit}{minute second digit}
% Scans timezone and splits hour and minute part.
%    \begin{macrocode}
\def\@svn@parsetimezone#1#2#3#4#5\relax{%
  \gdef\svnfiletimezonehour{#1#2#3}%
  \gdef\svnfiletimezoneminute{#4#5}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnpdfdate}
% Returns date in a format needed for |\pdfinfo|.
%    \begin{macrocode}
\def\svnpdfdate{%
  \svnyear\svnmonth\svnday
  \svnhour\svnminute\svnsecond\svntimezonehour'\svntimezoneminute'%
}
%    \end{macrocode}
% \end{macro}

% \subsection{Mainfile Makros}
% \begin{macro}{\svnsetmainfile}
% Saves the current |HeadURL| and |Filename| keywords to macros.
% Will be called automatically in the preamble.
% \changes{v1.2}{2007/06/22}{New macro}
%    \begin{macrocode}
\newcommand{\svnsetmainfile}{%
  \xdef\svnmainurl{\svnfileurl}%
  \xdef\svnmainfilename{\svnfilefname}%
}
\AtBeginDocument{\svnsetmainfile}
%    \end{macrocode}
% \end{macro}

% \subsection{Register and FullName Macros}
% \begin{macro}{\svnRegisterAuthor}[2]{author username}{Full Name}
% Saves the author's name by defining |svn@author@|\meta{username} to it.
%    \begin{macrocode}
\newcommand{\svnRegisterAuthor}[2]{%
  \expandafter\def\csname svn@author@#1\endcsname{#2}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnFullAuthor}
% \begin{macro}{\svnFullAuthor*}
% We test if the starred or the normal version is used and call the
% appropriate submacro |svnFullAuthor@star| or |svnFullAuthor@normal|.
% \changes{v1.2}{2007/06/22}{Macro now returns the username if the full name
% was not registered.}
%    \begin{macrocode}
\newcommand{\svnFullAuthor}{%
  \@ifnextchar{*}%
    {\svnFullAuthor@star}%
    {\svnFullAuthor@normal}%
}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \begin{macro}{\svnFullAuthor@star}[1]{username}
% Both submacros are calling |svnFullAuthor@| but with different arguments.
% The star macro also removes the star of course.
%    \begin{macrocode}
\def\svnFullAuthor@star*#1{%
  \edef\svn@temp{#1}%
  \svnFullAuthor@{\svn@temp}{~(\svn@temp)}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\svnFullAuthor@normal}[1]{username}
%    \begin{macrocode}
\def\svnFullAuthor@normal#1{%
  \edef\svn@temp{#1}%
  \svnFullAuthor@{\svn@temp}{}%
}%
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\svnFullAuthor@}[2]{username}{previous defined trailing string}
% |svnFullAuthor@| now sets the author's full name. Note that |#2| is empty
% when the normal version is called.
%    \begin{macrocode}
\def\svnFullAuthor@#1#2{%
  \@ifundefined{svn@author@#1}%
    {#1}%
    {\csname svn@author@#1\endcsname #2}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnRegisterRevision}[2]{revision number}{tag name}
% Saves the revision's name or tag by defining
% |svn@revision@|\meta{revisionnumber} to it.
% \changes{v1.2}{2007/06/22}{New macro}
%    \begin{macrocode}
\newcommand{\svnRegisterRevision}[2]{%
  \expandafter\def\csname svn@revision@#1\endcsname{#2}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnFullRevision}
% \begin{macro}{\svnFullRevision*}
% We test if the starred or the normal version is used and call the
% appropriate submacro |svnFullRevision@star| or |svnFullRevision@normal|.
% \changes{v1.2}{2007/06/22}{New macro}
%    \begin{macrocode}
\newcommand{\svnFullRevision}{%
  \@ifnextchar{*}%
    {\svnFullRevision@star}%
    {\svnFullRevision@normal}%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\svnFullRevision@star}[1]{revision number}
% Both submacros are calling |svnFullRevision@| but with different arguments.
% The star macro also removes the star of course.
%    \begin{macrocode}
\def\svnFullRevision@star*#1{%
  \edef\svn@temp{#1}%
  \svnFullRevision@{\svn@temp}{~(r\svn@temp)}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\svnFullRevision@normal}[1]{revision number}
%    \begin{macrocode}
\def\svnFullRevision@normal#1{%
  \edef\svn@temp{#1}%
  \svnFullRevision@{\svn@temp}{}%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\svnFullRevision@}[2]{revision number}{previous defined trailing
% string}
% |svnFullRevision@| now sets the revision name. Note that |#2| is empty
% when the normal version is called.
%    \begin{macrocode}
\def\svnFullRevision@#1#2{%
  \@ifundefined{svn@revision@#1}%
    {Revision #1}%
    {\csname svn@revision@#1\endcsname #2}%
}
%    \end{macrocode}
% \end{macro}

% \subsection{Input File Name}
% The \pkg{currfile} package is used to get the input file names. AtBegin/AtEnd 
% hooks are installed which will be used later.
%    \begin{macrocode}
\if@svnmulti@filehooks
%    \end{macrocode}

% Load \pkg{filehook} and \pkg{currfile} packages.
%    \begin{macrocode}
\RequirePackage{filehook}[2011/01/03]
\RequirePackage{currfile}[2011/01/03]
%    \end{macrocode}

% The following code installs the necessary hooks for subfiles.
% It installs an own file stack \pkg{currfile} does.
% The macro \cs{svn@pg} for the parent group needs to be set before
% \cs{currfilepath} etc. is updated, so the internal \pkg{filehook}
% macros are used to install the code before the \pkg{currfile} code.
% This means that the file name macros below still hold the values of the
% parent file.
%
%    \begin{macrocode}
\filehook@prefixwarg\filehook@every@atbegin{%
  \svn@pushfilestack
  \if@svnmulti@groups
    \svn@ifequal{\currfilepath}{\jobname.\currfile@mainext}%
      {\xdef\svn@pg{\svn@g}}%
      {\xdef\svn@pg{\currfiledir\currfilebase}}%
  \fi
}
%    \end{macrocode}
%
% The file stack is popped at the end of the file hook to keep the macros valid
% for normal hook code.
%    \begin{macrocode}
\filehook@appendwarg\filehook@every@atend{%
  \svn@popfilestack
}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\svn@filestack{{}}

\def\svn@pushfilestack{%
  \xdef\svn@filestack{{%
    {\svnfilerev}%
    {\svnfiledate}%
    {\svnfileauthor}%
    {\svnfileyear}%
    {\svnfilemonth}%
    {\svnfileday}%
    {\svnfilehour}%
    {\svnfileminute}%
    {\svnfilesecond}%
    {\svnfiletimezonehour}%
    {\svnfiletimezoneminute}%
    {\svnfileurl}%
    {\svnfilefname}%
    {\svn@g}%
    {\svn@pg}%
    {\ifsvnfilemodified{@firstoftwo}{@secondoftwo}}%
  }\svn@filestack}%
}

\def\svn@restorefilekws#1#2\relax{%
  \svn@restorefilekws@#1\empty
  \empty \empty \empty \empty
  \empty \empty \empty \empty
  \empty \empty \empty \empty \empty
  \svn@ifempty{#2}%
    {\gdef\svn@filestack{{}}}%
    {\gdef\svn@filestack{#2}}%
}
\def\svn@restorefilekws@#1#2#3#4#5#6#7#8#9{%
  \gdef\svnfilerev{#1}%
  \gdef\svnfiledate{#2}%
  \gdef\svnfileauthor{#3}%
  \gdef\svnfileyear{#4}%
  \gdef\svnfilemonth{#5}%
  \gdef\svnfileday{#6}%
  \gdef\svnfilehour{#7}%
  \gdef\svnfileminute{#8}%
  \gdef\svnfilesecond{#9}%
  \svn@restorefilekws@@
}

\def\svn@restorefilekws@@#1#2#3#4#5#6#7{%
  \gdef\svnfiletimezonehour{#1}%
  \gdef\svnfiletimezoneminute{#2}%
  \gdef\svnfileurl{#3}%
  \gdef\svnfilefname{#4}%
  \gdef\svn@g{#5}%
  \gdef\svn@pg{#6}%
  \expandafter\global\expandafter\let
  \expandafter\ifsvnfilemodified\csname#7\endcsname%
}

\def\svn@popfilestack{%
  \ifx\svn@filestack\empty
    \PackageWarning{svn-multi}{Underflow of file keyword stack!}%
  \else
    \svn@ifequal{\svn@filestack}{{}}%
      {\PackageWarning{svn-multi}{Underflow of file keyword stack!}}%
      {\expandafter\svn@restorefilekws\svn@filestack\relax}%
  \fi
}

%
%    \end{macrocode}

%    \begin{macrocode}
\fi
%    \end{macrocode}

% \subsection{Keyword Group Macros}
% These macros implement the user interface for the keyword group functionality
% introduced with v2.0.
%
% The list of keyword groups |\svn@glist| is initial set empty and will be
% filled by \cs{svngroup}.
%    \begin{macrocode}
\if@svnmulti@groups
\let\svn@glist=\empty
%    \end{macrocode}

% \begin{macro}{\svngroup}[1]{group name}
% Saves the group to |\svn@g| and initiates \Macro\svn@g@<group name>'@rev'
% and \Macro\@svn@g@<group name>'@rev' if this is the first time the group
% got used.\par
% The current group symbol "*" is invalid here because there is no way to
% change to a current group.
%    \begin{macrocode}
\def\svngroup#1{%
  \svn@ifequal{#1}{*}%
    {\PackageError{svn-multi}%
      {The group name '*' is invalid for '\string\svngroup'}{}%
    }{}%
  \xdef\svn@g{#1}%
  \let\svn@pg\svn@g
  \svn@checkgroup{#1}%
}
\def\svn@checkgroup#1{%
  \begingroup
  \edef\svn@g{#1}%
%    \end{macrocode}
% Only initialise the group at first usage:
%    \begin{macrocode}
  \ifx\svn@g\empty\else%
    \expandafter
    \ifx\csname @svng@\svn@g @rev\endcsname\relax%
      \svn@initgroup{\svn@g}%
%    \end{macrocode}
% Now save new group to list. The list is checked if its empty to avoid an
% unwanted leading comma.
%    \begin{macrocode}
      \ifx\svn@glist\empty
        \xdef\svn@glist{#1}%
      \else
        \xdef\svn@glist{\svn@glist,#1}%
      \fi
    \fi
  \fi
  \endgroup
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\thesvngroup}
% Returns the current group name to the user.
%    \begin{macrocode}
\def\thesvngroup{\svn@g}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnsetcg}[1]{group name}
% Defines |\svn@cg| to the given argument or to |\svn@g| if the argument was
% `|*|'.
%    \begin{macrocode}
\def\svnsetcg#1{%
  \svn@ifequal{#1}{*}%
    {\def\svn@cg{\svn@g}}%
    {\def\svn@cg{#1}}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svncg@def}[1]{key name, \eg `rev', `date'}
% Defines a |\svncgXXX| macro, \eg |svncgrev|, which returns the
% requested keyword values of the current keyword group.
%    \begin{macrocode}
\def\svncg@def#1{%
  \expandafter
  \def\csname svncg#1\endcsname{%
    \@ifundefined{svng@\svn@cg @#1}{??}{%
    \csname svng@\svn@cg @#1\endcsname}%
  }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svncgrev}
% \begin{macro}{\svncgdate}
% \begin{macro}{\svncgauthor}
% \begin{macro}{\svncgyear}
% \begin{macro}{\svncgmonth}
% \begin{macro}{\svncgday}
% \begin{macro}{\svncghour}
% \begin{macro}{\svncgminute}
% \begin{macro}{\svncgsecond}
% \begin{macro}{\svncgtimezonehour}
% \begin{macro}{\svncgtimezoneminute}
% \begin{macro}{\svncgurl}
% \begin{macro}{\svncgfname}
% Define all |\svncgXXX| macros by calling \cs{svncg@def} in a for loop.
%    \begin{macrocode}
\@for\@tempa:=%
  rev,author,date,year,month,day,hour,minute,second,%
  timezonehour,timezoneminute,url,fname%
\do{%
  \expandafter\svncg@def\expandafter{\@tempa}%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}

% \begin{macro}{\thesvncg}
% Simply return the internal macro.
%    \begin{macrocode}
\def\thesvncg{\svn@cg}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svng}[2]{group name}{keyword name}
% Simply returns |svng@#1@#2| if defined, '??' otherwise.
%    \begin{macrocode}
\def\svng#1#2{%
  \@ifundefined{svng@\svn@temp @#2}%
    {??}%
    {\csname svng@\svn@temp @#2\endcsname}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@addfiletogroup}[2]{file name}{group name}
% Adds the given file to the given group. If the group list doesn't exist yet
% it is initialised. A extra macro for each file is used to remember that the
% file is already in the group. This could be avoided using a list search.\par
% This is an internal macro so no `|*|' substitution for the group name.
%    \begin{macrocode}
\def\svn@addfiletogroup#1#2{%
  \svn@ifequal{#1}{#2}{}{%
  \expandafter
  \ifx\csname @svng@#2@files@#1\endcsname\relax%
    \expandafter\gdef\csname @svng@#2@files@#1\endcsname{1}%
    %
    \expandafter\ifx\csname @svng@#2@files\endcsname\empty%
      \expandafter\xdef\csname @svng@#2@files\endcsname{#1}%
    \else
    \@ifundefined{@svng@#2@files}%
      {\expandafter\xdef\csname @svng@#2@files\endcsname{#1}}%
      {\expandafter\xdef\csname @svng@#2@files\endcsname{%
        \csname @svng@#2@files\endcsname,#1%
       }%
      }%
    \fi
  \fi
  }%
}
%    \end{macrocode}
% \end{macro}

% The input files are added to the list of the current group at their begin to
% have them before the included graphics and other external files.
% Special care is taken to not re-initialise the main file which could happen in
% some special cases (\eg |\lstinputlisting{\jobname .tex}|).
%    \begin{macrocode}
\AtBeginOfFiles{%
  \svn@ifequal{\currfilepath}{\jobname.\currfile@mainext}%
    {}%
    {\svn@initfile}%
  \svn@ifequal{\currfileext}{\currfile@mainext}%
    {\svn@addfiletogroup{\currfiledir\currfilebase}{\svn@pg}}{}%
  \svn@ifequal{\currfileext}{sty}%
    {\svn@addfiletogroup{\currfiledir\currfilebase}{\svn@pg}}{}%
  \svn@ifequal{\currfileext}{cls}%
    {\svn@addfiletogroup{\currfiledir\currfilebase}{\svn@pg}}{}%
  \svn@addfiletogroup{\currfilepath}{\currfiledir\currfilebase}%
}
%    \end{macrocode}

% \begin{macro}{\svn@writegroup}[1]{group name}
% Writes group to |\svn@write| file.
%    \begin{macrocode}
\def\svn@writegroup#1{%
  \def\svn@writekw##1{%
   \immediate\write\svn@write{%
     \string\global\string\@namedef{svng@#1@##1}{\csname @svng@#1@##1\endcsname}%
   }%
  }%
  \svn@writekw{rev}%
  \svn@writekw{date}%
  \svn@writekw{author}%
  \svn@writekw{year}%
  \svn@writekw{month}%
  \svn@writekw{day}%
  \svn@writekw{hour}%
  \svn@writekw{minute}%
  \svn@writekw{second}%
  \svn@writekw{timezonehour}%
  \svn@writekw{timezoneminute}%
  \@ifundefined{@svng@#1@files}{}{%
    \immediate\write\svn@write{%
      \noexpand
      \svn@namegdefverb{svng@#1@files}{\csname @svng@#1@files\endcsname}%
    }%
  }%
  \immediate\write\svn@write{%
    \noexpand
    \svn@namegdefverb{svng@#1@url}{\csname @svng@#1@url\endcsname}^^J%
    \noexpand
    \svn@namegdefverb{svng@#1@fname}{\csname @svng@#1@fname\endcsname}^^J%
  }%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\svn@writeallgroups}[1]{macro holding a list of groups}
%    \begin{macrocode}
\def\svn@writeallgroups#1{%
  \begingroup
    \ifx\relax#1\relax\else
      \@for\svn@temp:=#1\do{%
        \svn@ifvalidrev{@svng@\svn@temp @rev}%
          {%
            \expandafter
            \svn@cleanfilelist\csname @svng@\svn@temp @files\endcsname
            \svn@writegroup{\svn@temp}%
            \@ifundefined{@svng@\svn@temp @files}{}%
              {\expandafter\svn@writeallgroups
               \csname @svng@\svn@temp @files\endcsname
              }%
          }{}%
      }%
    \fi
  \endgroup
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@updategroup}[1]{group name}
% Updates group with |\svnfile...| macro values.
%    \begin{macrocode}
\def\svn@updategroup#1{%
  \@ifundefined{@svng@#1@rev}%
    {\svn@initgroup{#1}}%
    {}%
  \expandafter
  \ifnum\csname @svng@#1@rev\endcsname<\svnfilerev
    \svn@gkwset{#1}{rev}{\svnfilerev}%
    \svn@gkwset{#1}{date}{\svnfiledate}%
    \svn@gkwset{#1}{author}{\svnfileauthor}%
    \svn@gkwset{#1}{year}{\svnfileyear}%
    \svn@gkwset{#1}{month}{\svnfilemonth}%
    \svn@gkwset{#1}{day}{\svnfileday}%
    \svn@gkwset{#1}{hour}{\svnfilehour}%
    \svn@gkwset{#1}{minute}{\svnfileminute}%
    \svn@gkwset{#1}{second}{\svnfilesecond}%
    \svn@gkwset{#1}{timezonehour}{\svnfiletimezonehour}%
    \svn@gkwset{#1}{timezoneminute}{\svnfiletimezoneminute}%
    \svn@gkwset{#1}{url}{\svnfileurl}%
    \svn@gkwset{#1}{fname}{\svnfilefname}%
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@definegroup}[1]{group name}
% Defines group value so that they are available for the user, e.g. instead of
% the internal |@svng@...| macros it sets the |svng@...| macros.
% This is done by calling \cs{svn@updategroup} with a modified version of
% \cs{svn@gkwset}.
%    \begin{macrocode}
\def\svn@definegroup#1{%
  \svn@gkwdef{#1}{rev}%
  \svn@gkwdef{#1}{date}%
  \svn@gkwdef{#1}{author}%
  \svn@gkwdef{#1}{year}%
  \svn@gkwdef{#1}{month}%
  \svn@gkwdef{#1}{day}%
  \svn@gkwdef{#1}{hour}%
  \svn@gkwdef{#1}{minute}%
  \svn@gkwdef{#1}{second}%
  \svn@gkwdef{#1}{timezonehour}%
  \svn@gkwdef{#1}{timezoneminute}%
  \svn@gkwdef{#1}{url}%
  \svn@gkwdef{#1}{fname}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@initgroup}[1]{group name}
% Initialises group.
%    \begin{macrocode}
\def\svn@initgroup#1{%
  \svn@gkwset{#1}{rev}{\svn@revinit}%
  \svn@gkwset{#1}{date}{}%
  \svn@gkwset{#1}{author}{}%
  \svn@gkwset{#1}{year}{0000}%
  \svn@gkwset{#1}{month}{00}%
  \svn@gkwset{#1}{day}{00}%
  \svn@gkwset{#1}{hour}{00}%
  \svn@gkwset{#1}{minute}{00}%
  \svn@gkwset{#1}{second}{00}%
  \svn@gkwset{#1}{timezonehour}{+00}%
  \svn@gkwset{#1}{timezoneminute}{00}%
  \svn@gkwset{#1}{url}{}%
  \svn@gkwset{#1}{fname}{}%
}
%    \end{macrocode}
% \end{macro}


% \begin{macro}{\svn@gkwset}[3]{group name}{keyword name}{value}
% Sets \meta{value} for \meta{keyword} in \meta{\/group}.
%    \begin{macrocode}
\def\svn@gkwset#1#2#3{%
  \expandafter
  \xdef\csname @svng@#1@#2\endcsname{#3}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@gkwdef}[2]{group name}{keyword name}
% Defines |svng@...| macros used by the user macros to the value of the
% internal |@svng@...| macros.
%    \begin{macrocode}
\def\svn@gkwdef#1#2{%
  \expandafter
  \xdef\csname svng@#1@#2\endcsname{\csname @svng@#1@#2\endcsname}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@cleanfilelist}[1]{macro holing a file list}
% Takes a macro which holds a file list and removes all files from the list 
% which don't have a valid revision number.
%    \begin{macrocode}
\def\svn@cleanfilelist#1{
  \begingroup
    \def\svn@tmplist{}%
    \ifx\relax#1\relax\else
      \@for\svn@temp:=#1\do{%
        \expandafter\svn@ifvalidrev
        \expandafter{@svng@\svn@temp @rev}%
          {\edef\svn@tmplist{\svn@tmplist,\svn@temp}}%
          {}%
      }%
      \xdef#1{\expandafter\@gobble\svn@tmplist\empty}%
    \fi
  \endgroup
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\fi
%    \end{macrocode}

% \subsection{Files as extra groups}
% Macros which allow single files to be declared as extra groups so that their
% keywords can be accessed in the whole document like with normal groups.
% This special groups are not added to the list of groups.

% A user-level switch is declared to enable or disable the automatic declaration
% of every file as own group. This causes \cs{svnsubgroup} to be called for
% all input files.
% The if macro is defined outside the |\if@svnmulti@subgroups| because
% |\newif| inside |\if| is not a good idea.
%    \begin{macrocode}
\newif\ifsvnsubgroups
\svnsubgroupsfalse
%    \end{macrocode}

%    \begin{macrocode}
\if@svnmulti@subgroups
\svnsubgroupstrue
%    \end{macrocode}

% \begin{macro}{\svnsubgroup}
% User level and internal macro to declare the current file as extra group.
% It produces the current file path and calls \cs{svn@subgroup}.
% Creates two groups one with and one without the file extension. The one
% without holds the latest revision of all files included in this file.
%    \begin{macrocode}
\def\svnsubgroup{%
  \begingroup
    \svn@subgroup{\currfiledir\currfilebase}%
    \svn@subgroup{\currfilepath}%
  \endgroup
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@subgroup}[1]{file name}
% Macro to write a file as group to |.aux| file. After checking if the filename
% was not already written, the |.aux| file is checked if it is open and then the
% file keyword information is written.
%    \begin{macrocode}
\def\svn@subgroup#1{%
  \ifnum\svnfilerev=\svn@revinit\else
    \expandafter\ifx\csname svn@g@#1\endcsname\relax%
      \expandafter\gdef\csname svn@g@#1\endcsname{1}%
      \svn@updategroup{#1}%
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnignoreextensions}[1]{A comma separated list of file name
% extensions (without leading dot) to ignore for automatic \csd{svnsubgroup}.}
% A special macro is defined for all extensions. The existents of this macro is
% then tested later to check if this extension should be ignored.
%    \begin{macrocode}
\def\svnignoreextensions#1{%
  \@for\svn@temp:=#1\do{%
    \expandafter\def\csname svn@ignore@ext@\svn@temp\endcsname{}%
  }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnconsiderextensions}[1]{A comma separated list of file name
% extensions (without leading dot) to consider for automatic
% \csd{svnsubgroup}.}
% The special macro defined by \csi{svnignoreextentions} is deleted, i.e. |\let|
% to |\relax|.
%    \begin{macrocode}
\def\svnconsiderextensions#1{%
  \@for\svn@temp:=#1\do{%
  \expandafter\let\csname svn@ignore@ext@\svn@temp\endcsname\relax%
  }%
}
%    \end{macrocode}
% \end{macro}

% The following extensions are ignored by default.
%    \begin{macrocode}
\svnignoreextensions{aux,bbl,fd,enc,fls,glo,idx,ilg,ind,ist,%
lof,log,lot,out,svn,svt,svx,toc}
%    \end{macrocode}

% Check at the end of every input file if files should be extra groups and
% declare this file as group if its extension is not configured to be ignored.
%    \begin{macrocode}
\AtEndOfFiles{%
  \if@svnmulti@subgroups
    \ifsvnsubgroups
      \expandafter\ifx\csname svn@ignore@ext@\currfileext\endcsname\relax
      \svnsubgroup
      \fi
    \fi
  \fi
}
%    \end{macrocode}

% The main file is added to the main base name (|\jobname|) subgroup here.  This 
% subgroup is added as first element to the active group at begin of the 
% document body.
%    \begin{macrocode}
\if@svnmulti@subgroups
  \ifsvnsubgroups
    \svn@addfiletogroup{\jobname .\currfile@mainext}{\jobname}%
    \svnsubgroup
  \fi
\fi
\AtBeginDocument{%
  \if@svnmulti@subgroups
    \ifsvnsubgroups
    \@ifundefined{@svng@\svn@g @files@\jobname}%
      {%
      \@namedef{@svng@\svn@g @files@\jobname}{1}%
      \@ifundefined{@svng@\svn@g @files}%
        {%
          \expandafter
          \xdef\csname @svng@\svn@g @files\endcsname{\jobname}%
        }%
        {%
          \expandafter
          \xdef\csname @svng@\svn@g @files\endcsname
            {\jobname,\csname @svng@\svn@g @files\endcsname}%
        }%
      }{}%
      \svnsubgroup
    \fi
  \fi
}
%    \end{macrocode}

%    \begin{macrocode}
\fi
%    \end{macrocode}

% \subsection{External Files}
% Macros to declare external files and load the keywords from |.svx| files
% generated by \scr{svn-multi.pl}.
%    \begin{macrocode}
\if@svnmulti@external
%    \end{macrocode}

% \begin{macro}{\svnexternalgroup}[1]{group name}
% Defines the default group of external files. The default is to always use the
% current group.  An empty argument puts the external files in no group. A `|*|'
% switches back to always use the current group.
%    \begin{macrocode}
\if@svnmulti@groups
\def\svnexternalgroup#1{%
  \svn@ifequal{#1}{*}%
    {\def\svn@externalgroup{\svn@pg}}%
    {\def\svn@externalgroup{#1}}%
}
\def\svn@externalgroup{\svn@pg}
\else
\def\svn@externalgroup{}
\fi
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnexternal}[2]{group name}{list of filenames in \texttt{\{ 
% \}}}
%    \begin{macrocode}
\if@svnmulti@autokw
%    \end{macrocode}
%
%    \begin{macrocode}
\newcommand*\svnexternal[2][]{%
  \svn@pushfilestack
  \svn@ifequal{#1}{*}%
    {\edef\svn@eg{\svn@pg}}%
    {\svn@ifempty{#1}%
      {\edef\svn@eg{\svn@externalgroup}}%
      {\edef\svn@eg{#1}}%
    }%
  \svn@checkgroup{\svn@eg}%
  \svne@@external#2\relax
  \svn@popfilestack
}

\def\svne@@external#1{%
  \ifx\relax#1\empty\else
    \svnegetfile{#1}%
    \begingroup\svn@externalfile{\svn@eg}{#1}%
    \expandafter\svne@@external
  \fi
}
%    \end{macrocode}
%
%    \begin{macrocode}
\else
%    \end{macrocode}
% Writes the current input file path and its argument as arguments of
% \cs{@svnexternal} into the |.aux| file.
%    \begin{macrocode}
\newcommand*\svnexternal[2][]{%
  \if@filesw
    \begingroup
      \svn@ifequal{#1}{*}%
        {\def\svn@temp{\svn@pg}}%
        {\svn@ifempty{#1}%
          {\def\svn@temp{\svn@externalgroup}}%
          {\def\svn@temp{#1}}%
        }%
      \let\protect\@unexpandable@protect
      \immediate\write\svn@write{%
        \noexpand\@svnexternal[\svn@temp]{\currfilepath}{#2}%
      }%
    \endgroup
  \fi
  \svn@inputsvx{\currfiledir\currfilebase}%
}
%    \end{macrocode}
%    \begin{macrocode}
\fi
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnexternalpath}[1]{list of paths in \texttt{\{ \}}}
% Writes its argument as argument of \cs{@svnexternalpath} into the |.aux| file.
%    \begin{macrocode}
\def\svnexternalpath#1{%
  \if@filesw
    \begingroup
    \let\protect\@unexpandable@protect
    \immediate\write\svn@write{%
      \noexpand\@svnexternalpath{#1}%
    }%
    \endgroup
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\@svnexternal}
% \begin{macro}{\@svnexternalpath}
% Discards the argument(s). These macros and their arguments are only used by
% the external \scr{svn-multi.pl} script.
%    \begin{macrocode}
\newcommand*\@svnexternal[3][]{}
\def\@svnexternalpath#1{}
%    \end{macrocode}
% \end{macro}
% \end{macro}


% \begin{macro}{\svnexternalfile}
% This macro is generated by \scr{svn-multi.pl} and should not be used by the
% user.  If files-as-group is enabled some special characters are disabled and
% the \cs{svn@externalfile} is called to read the file name. Otherwise the
% argument is simply removed.
%    \begin{macrocode}
\newcommand*\svnexternalfile[1][\currfiledir\currfilebase]{%
  \begingroup % TODO: maybe use \svn@catcodes
    \catcode`\_=12
    \catcode`\&=12
    \catcode`\^=12
    \catcode`\$=12
    \catcode`\#=12
    \svn@externalfile{#1}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@externalfile}[2]{group name}{file name}
% Ends group which began in \cs{svnexternalfile} and calls the appropriate
% macros.
%    \begin{macrocode}
\def\svn@externalfile#1#2{%
  \endgroup
  \if@svnmulti@subgroups
    \ifsvnsubgroups
      \svn@ifequal{#1}{\svn@rg}%
        {\svn@addfiletogroup{#2}{\currfiledir\currfilebase}}%
        {\svn@addfiletogroup{#2}{#1}}%
      \svn@subgroup{#2}%
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}

% If \opt{external} option is not enabled a placeholder macro is defined which
% simply ignores its argument.
%    \begin{macrocode}
\else
  \def\svnexternalfile#1{}%
\fi
%    \end{macrocode}


% \subsection{Auto loading of \texttt{.svx} files}
% Auto loading of |.svx| files at the begin of |\input| or |\include| files
% using the \cs{AtBeginOfFiles} hook.
% The macros \cs{svn@addfiletogroup} and \cs{svnsubgroup} are used to do the
% actual work.
%    \begin{macrocode}
\if@svnmulti@autoload

\AtBeginOfFiles{%
  \svn@ifequal{\currfileext}{tex}%
    {\svn@inputsvx{\currfiledir\currfilebase}}%
    {}%
}
%    \end{macrocode}

% The main |.svx| is loaded at the end of the package.
%    \begin{macrocode}
%%\AtEndOfPackage{%
\AtBeginDocument{%
  \svn@inputsvx{\jobname}%
}
%    \end{macrocode}

%    \begin{macrocode}
\fi
%    \end{macrocode}


% \subsection{Support for Graphic Packages}

% \subsubsection{Common Code}
%    \begin{macrocode}
\if@svnmulti@anygraphic
%    \end{macrocode}

% \begin{macro}{\svngraphicsgroup}[1]{graphic group name}
% Defines the default group of graphics files. The default is empty which means
% the current group.
%    \begin{macrocode}
\def\svngraphicsgroup#1{%
  \svn@ifequal{#1}{*}%
    {\def\svn@graphicsgroup{\svn@pg}}%
    {\def\svn@graphicsgroup{#1}}%
}
\def\svn@graphicsgroup{\svn@externalgroup}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnignoregraphic}[1]{file name/path}
% Ignores the given graphic file by defining a special macro.
%    \begin{macrocode}
\def\svnignoregraphic#1{%
  \expandafter\def\csname svn@ignoregraphic@#1\endcsname{}%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnconsidergraphic}[1]{file name/path}
% Deletes the special ignore macro to consider the graphic again.
%    \begin{macrocode}
\def\svnconsidergraphic#1{%
  \expandafter\let\csname svn@ignoregraphic@#1\endcsname\relax%
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\fi
%    \end{macrocode}

% \subsubsection{Package \texttt{graphics}}
% Automatic declaration of all images included by |\includegraphics| from the
% \pkg{graphics} package as external files. We use the |\Gin@setfile| macro from
% that package which receives the image file name as third argument.
%    \begin{macrocode}
\if@svnmulti@graphics
\RequirePackage{graphics}[2006/02/20]
%    \end{macrocode}

% \begin{macro}{\Gin@setfile}[3]{??, not used}{??, not used}{graphic file
% name/path}
%    \begin{macrocode}
\message{Package svn-multi: patching macro '\string\Gin@setfile' from the
'graphics' package!}%
\let\svnmulti@Gin@setfile\Gin@setfile
\renewcommand*{\Gin@setfile}[3]{%
  \expandafter\ifx\csname svn@ignoregraphic@#3\endcsname\relax%
    \svnexternal[\svn@graphicsgroup]{{#3}}%
  \fi
  \svnmulti@Gin@setfile{#1}{#2}{#3}%
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\fi
%    \end{macrocode}

% \subsubsection{Package \texttt{pgf}}
% The \pkg{pgf} macro |\pgf@declareimage| which is called by the user macro
% |\pgfdeclareimage| is used.
%    \begin{macrocode}
\if@svnmulti@pgfimages
\RequirePackage{pgf}[2008/01/15]
%    \end{macrocode}

% \begin{macro}{\pgf@declareimage}[3]{??, not used}{image label}{??, not used}
%    \begin{macrocode}
\message{Package svn-multi: patching macro '\string\pgf@declareimage' and will
patch generated macros '\string\pgf@image@<name>!' from the 'pgf' package!}%
\let\svnmulti@pgf@declareimage\pgf@declareimage
\renewcommand*{\pgf@declareimage}[3][]{%
  \svnmulti@pgf@declareimage[#1]{#2}{#3}%
%    \end{macrocode}
% At this point the used image filename is defined by |\pgf@filename| and the
% image itself is defined by |\pgf@image@#2!| which is a |\let| copy of
% temporary |\pgf@image|.  An own copy of this is created and the old name
% |\pgf@image@#2!| is used to execute \cs{svnexternal} every time the image is
% included using |\pgfuseimage|.
% \begin{macrocode}
  \ifx\pgf@filename\empty\else
    \expandafter\ifx\csname svn@ignoregraphic@\pgf@filename\endcsname\relax%
      \expandafter\global\expandafter%
      \let\csname svnmulti@pgf@image@#2!\endcsname=\pgf@image%
      \expandafter\xdef\csname pgf@image@#2!\endcsname{%
        \noexpand\svnexternal[\noexpand\svn@graphicsgroup]{{\pgf@filename}}%
        \csname svnmulti@pgf@image@#2!\endcsname
      }%
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\fi
%    \end{macrocode}
%
% \subsection{Table of Revisions}
%
%    \begin{macrocode}
\if@svnmulti@table
\ifx\tableofcontents\relax\else
%    \end{macrocode}
%
% \begin{macro}{\svnrevisionsname}
% Simple definition for now. Language support over `babel's |\languagename|
% possible.
%    \begin{macrocode}
\def\svnrevisionsname{Table of Revisions}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\svn@svt}
% File ending for table of revision auxiliary file. A macro is used to allow
% redefinition by the user if another package is uses the same ending.
%    \begin{macrocode}
\def\svn@svt{svt}
%    \end{macrocode}
% \end{macro}
%

% \begin{macro}{\tableofrevisions}
% The |\tableofcontents| macro from standard \LaTeX\ is adapted for this macro.
% Classes which provide chapters will get a different table then one which not.
%
% The external (\ie non-svn-multi) if-switches are masked using |\ifx| and 
% |\csname| to avoid \TeX{} if-parsing errors when they are not defined.
%    \begin{macrocode}
\AtBeginDocument{%
\ifx\chapter\relax
  \let\chapter\@undefined
\fi
\ifx\chapter\@undefined

%% Adapted from the \tableofcontents macro, LaTeX `article' class [2005/09/16]
\newcommand\tableofrevisions{%
  \section*{\svnrevisionsname
  \@mkboth{\MakeUppercase\svnrevisionsname}{\MakeUppercase\svnrevisionsname}}%
  \svn@input{\jobname .\svn@svt}%
}

\else

%% Adapted from the \tableofcontents macro, LaTeX `book' class [2005/09/16]
\newcommand\tableofrevisions{%
  \expandafter\ifx
  \csname if@twocolumn\expandafter\endcsname
  \csname iftrue\endcsname
    \@restonecoltrue\onecolumn
  \else
    \@restonecolfalse
  \fi
  \chapter*{\svnrevisionsname
    \@mkboth{\MakeUppercase\svnrevisionsname}{\MakeUppercase\svnrevisionsname}}%
  \svn@input{\jobname .\svn@svt}%
  \expandafter\ifx
  \csname if@restonecol\expandafter\endcsname
  \csname iftrue\endcsname
    \twocolumn
  \fi
}

\fi
}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\fi % defined \tableofcontents
%    \end{macrocode}

% \begin{macro}{\svn@writerow}[3]{row type ('group', 'file', 'global', \ldots)}
% {row type specific argument}{row type specific argument}
% Writes a table row by using |\svn@tabcell| and |\svn@tabcellarg| defined by
% the |\svn@writeXXXrow| macro below.
%    \begin{macrocode}
\def\svn@writerow#1#2#3{%
  \immediate\write\svn@svtwrite{%
    \expandafter\noexpand\csname svn#1row\endcsname
    \expandafter\noexpand\csname svntab#1\endcsname{#2}{#3}\space
    \@ampersamchar\space
    \svn@tabcell{rev}\space\@ampersamchar\space
    \svn@tabcell{author}\space\@ampersamchar\space
    \noexpand\svntabdate%
    \svn@tabcellarg{year}%
    \svn@tabcellarg{month}%
    \svn@tabcellarg{day}%
    \svn@tabcellarg{hour}%
    \svn@tabcellarg{minute}%
    \svn@tabcellarg{second}%
    \svn@tabcellarg{timezonehour}%
    \svn@tabcellarg{timezoneminute}%
    \space\@backslashchar\@backslashchar
    \expandafter\noexpand\csname endsvn#1row\endcsname
  }%
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@writegrouprow}[1]{current group}
%    \begin{macrocode}
\def\svn@writegrouprow#1{%
  \begingroup
    \def\svn@tabcellarg##1{{\csname @svng@#1@##1\endcsname}}%
    \def\svn@tabcell##1{\expandafter\noexpand\csname svntab##1\endcsname%
      \svn@tabcellarg{##1}%
    }%
    \svn@writerow{group}{#1}{}%
  \endgroup
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@writesubgrouprow}[2]{grouping level}{subgroup name}
%    \begin{macrocode}
\def\svn@writesubgrouprow#1#2{%
  \begingroup
    \def\svn@tabcellarg##1{{\csname @svng@#2@##1\endcsname}}%
    \def\svn@tabcell##1{\expandafter\noexpand\csname svntab##1\endcsname%
      \svn@tabcellarg{##1}%
    }%
    \svn@writerow{subgroup}{#1}{#2}%
  \endgroup
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@writefilerow}[2]{grouping level}{file name}
%    \begin{macrocode}
\def\svn@writefilerow#1#2{%
  \begingroup
    \def\svn@tabcellarg##1{{\csname @svng@#2@##1\endcsname}}%
    \def\svn@tabcell##1{\expandafter\noexpand\csname svntab##1\endcsname%
      \svn@tabcellarg{##1}%
    }%
    \svn@writerow{file}{#1}{#2}%
  \endgroup
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@writeglobalrow}
%    \begin{macrocode}
\def\svn@writeglobalrow{%
  \begingroup
  \def\svn@tabcellarg##1{{\csname @svn@##1\endcsname}}%
  \def\svn@tabcell##1{\expandafter\noexpand\csname svntab##1\endcsname%
    \svn@tabcellarg{##1}%
  }%
  \svn@writerow{global}{}{}%
  \endgroup
}
%    \end{macrocode}
% \end{macro}

% \subsubsection{Table Format Macros}\label{sec:impl:table}
% Generic format macro used in the |.svt| file. Can be redefined by the user to
% change table format. % TODO: More documentation needed!
%
% \begin{macro}{\svntable}
%    \begin{macrocode}
\def\svntable{%
  \begin{tabular}{p{0.425\textwidth}rll}%
    \hline
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\endsvntable}
%    \begin{macrocode}
\def\endsvntable{\hline\end{tabular}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svntablehead}
%    \begin{macrocode}
\def\svntablehead{%
    Name & Rev & Last Author & Last Changed At \\\hline
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\svntablefoot}
%    \begin{macrocode}
\def\svntablefoot{}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnbeforetable}
%    \begin{macrocode}
\def\svnbeforetable{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\svnaftertable}
%    \begin{macrocode}
\def\svnaftertable{\clearpage}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svnglobalrow}
%    \begin{macrocode}
\def\svnglobalrow{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\endsvnglobalrow}
%    \begin{macrocode}
\def\endsvnglobalrow{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\svngrouprow}
%    \begin{macrocode}
\def\svngrouprow{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\endsvngrouprow}
%    \begin{macrocode}
\def\endsvngrouprow{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\svnsubgrouprow}
%    \begin{macrocode}
\def\svnsubgrouprow{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\endsvnsubgrouprow}
%    \begin{macrocode}
\def\endsvnsubgrouprow{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\svnsubgrouprow}
%    \begin{macrocode}
\def\svnfilerow{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\endsvnfilerow}
%    \begin{macrocode}
\def\endsvnfilerow{}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svntabglobal}
%    \begin{macrocode}
\def\svntabglobal{Document}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\svntabgroup}
%    \begin{macrocode}
\def\svntabgroup#1{Group `#1'}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svntabfile}
%    \begin{macrocode}
\def\svntabsubgroup#1{%
  \raggedright
  \addtolength{\leftskip}{#1\medskipamount}%
  \begingroup
  \catcode`\_=12
  \catcode`\&=12
  \catcode`\^=12
  \catcode`\$=12
  \catcode`\#=12
  \svn@tabsubgroup
}
\def\svn@tabsubgroup#1{\endgroup Subgroup `\texttt{\small #1}'}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svntabfile}
%    \begin{macrocode}
\def\svntabfile#1{%
  \raggedright
  \addtolength{\leftskip}{#1\medskipamount}%
  \begingroup
  \catcode`\_=12
  \catcode`\&=12
  \catcode`\^=12
  \catcode`\$=12
  \catcode`\#=12
  \svn@tabfile
}
\def\svn@tabfile#1{\endgroup File `\texttt{\small #1}'}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svntabrev}
%    \begin{macrocode}
\def\svntabrev{}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\svntabauthor}
%    \begin{macrocode}
\def\svntabauthor#1{\svnFullAuthor{#1}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\svntabdate}
%    \begin{macrocode}
\def\svntabdate#1#2#3#4#5#6#7#8{%
    #1-#2-#3 #4:#5:#6% #7#8%
}
%    \end{macrocode}
% \end{macro}

%    \begin{macrocode}
\fi
%    \end{macrocode}
%

% \subsection{Other macros}
% This section contains macros which don't fit in any other section.
%
% \begin{macro}{\svn}
% \begin{macro}{\svn*}
% After *-testing, the intermediate macros |\svn@s| and |\svn@n| are called to
% strip the |{ }| from |\svn|[|*|]|{$...$}| and to remove the |*|. Then the
% actual macros are called to strip the dollars with or without the space
% before the last dollar.
% \changes{v1.2}{2007/06/22}{Added star version. Normal version was not
% changed to not break existing documents with user defined keywords without
% leading space.}
%    \begin{macrocode}
\newcommand{\svn}{\@ifnextchar{*}{\svn@s}{\svn@n}}
\def\svn@n#1{\@svn@n#1}
\def\svn@s*#1{\@svn@s#1}
\def\@svn@n$#1${#1}
\def\@svn@s$#1 ${#1}
%    \end{macrocode}
% \end{macro}
% \end{macro}

% \begin{macro}{\svnnolinkurl}[1]{URL}
% This code is taken from the \pkg{hyperref} package and is the definition of
% |\url| just without the part which creates the actual hyperlink. This needs
% of course the \pkg{hyperref} package. A warning is given if it isn't loaded.
% \changes{v1.2}{2007/06/22}{New macro}
%    \begin{macrocode}
%% Adapted from the \url macro of the `hyperref` package.
\DeclareRobustCommand*{\svnnolinkurl}{%
  \@ifundefined{hyper@normalise}%
    {\PackageWarning{svn-multi}{Package hyperref is needed for \noexpand
     \svnnolinkurl.}}%
    {\hyper@normalise\svnnolinkurl@}%
}%
\def\svnnolinkurl@#1{\Hurl{#1}}%
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@getfilename}[1]{URL}
% This macro expands the content using the temporary macro and sets it in front
% of the \csi{svn@getfilename} sub-macro together with |/{}| to make sure the
% macro does not break at values without directories. A |\relax| is used as
% end marker.
%    \begin{macrocode}
\def\svn@getfilename#1{%
  \begingroup
    \gdef\svnfiledir{}%
    \edef\svn@temp{#1}%
    \expandafter\@svn@getfilename\svn@temp/{}\relax
}%
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\@svn@getfilename}[2]{URL part before first slash}{URL part after
% first slash}
% Splits the content at the first slash (|/|) and checks if the remainder is
% empty. If so the end marker got reached and the part before the slash is the
% filename which is returned. Otherwise the macro recursively calls itself to
% split the remainder.
%    \begin{macrocode}
\def\@svn@getfilename#1/#2\relax{%
  \svn@ifempty{#2}%
    {%
      \endgroup
      \gdef\svnfilefname{#1}%
    }%
    {%
      \xdef\svnfiledir{\svnfiledir#1/}%
      \@svn@getfilename#2\relax
    }%
}%
%    \end{macrocode}
% \end{macro}

% \subsection{Write to Auxiliary File}

% \begin{macro}{\svn@write}
% Simply an alias for the main aux file write handle.
%    \begin{macrocode}
\let\svn@write\@mainaux
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\svn@writesvn}
% This macro writes the |.aux| auxiliary file and is called from a
% |\AtEndDocument| macro later on.
%    \begin{macrocode}
{\catcode`\&=12
\gdef\@ampersamchar{&}
}
\def\svn@writesvn{%
%    \end{macrocode}
% Remove all files which do not have a revision number from list:
%    \begin{macrocode}
    \if@svnmulti@groups
    \fi
%    \end{macrocode}
% Write document global values:
%    \begin{macrocode}
    \immediate\write\svn@write{^^J%
      \@percentchar\space Global values:^^J%
      \noexpand\gdef\noexpand\svnrev{\@svn@rev}^^J%
      \noexpand\global\noexpand\let\noexpand\ifsvnmodified\@backslashchar\@svn@modified^^J%
      \noexpand\gdef\noexpand\svndate{\@svn@date}^^J%
      \noexpand\gdef\noexpand\svnauthor{\@svn@author}^^J%
      \noexpand\gdef\noexpand\svnyear{\@svn@year}^^J%
      \noexpand\gdef\noexpand\svnmonth{\@svn@month}^^J%
      \noexpand\gdef\noexpand\svnday{\@svn@day}^^J%
      \noexpand\gdef\noexpand\svnhour{\@svn@hour}^^J%
      \noexpand\gdef\noexpand\svnminute{\@svn@minute}^^J%
      \noexpand\gdef\noexpand\svnsecond{\@svn@second}^^J%
      \noexpand\gdef\noexpand\svntimezonehour{\@svn@timezonehour}^^J%
      \noexpand\gdef\noexpand\svntimezoneminute{\@svn@timezoneminute}^^J%
      \noexpand\svn@gdefverb\noexpand\svnurl{\@svn@url}^^J%
      \noexpand\svn@gdefverb\noexpand\svnfname{\@svn@fname}^^J%
    }%
%    \end{macrocode}
% Write group keyword macro definitions.
% Remove all files which do not have a revision number from list:
%    \begin{macrocode}
    \if@svnmulti@groups
      \svn@cleanfilelist\@svng@@files
      \immediate\write\svn@write{%
        \noexpand\gdef\noexpand\svng@@files{\@svng@@files}^^J%
      }%
      \svn@writeallgroups\@svng@@files
%    \end{macrocode}
% Write keyword group values if groups were specified:
%    \begin{macrocode}
      \ifx\svn@glist\empty\else
        \begingroup
          \immediate\write\svn@write{^^J%
            \@percentchar\space SVN File Groups: \svn@glist
          }%
          \svn@writeallgroups\svn@glist
        \endgroup
      \fi
    \else
      \immediate\write\svn@write{^^J}%
    \fi
}
%    \end{macrocode}
% \end{macro}


% \begin{macro}{\svn@writegroupfiles}[1]{group name}
% Writes all files of a group to the |.svt| file. If the file is actually a
% subgroup it calls itself recursively.
%    \begin{macrocode}
\def\svn@writegroupfiles#1{%
  \begingroup
    \advance\svn@grouplevel by 1\relax
    \expandafter\let
    \expandafter\svn@files\csname @svng@#1@files\endcsname
%    \end{macrocode}
% Stop if no files in list.
%    \begin{macrocode}
    \ifx\svn@files\relax\else
      \svn@cleanfilelist\svn@files
      \@for\svn@file:=\svn@files\do{%
%    \end{macrocode}
% Check if VC data is set and then if it is a (sub)group or not by looking at 
% the file list.
%    \begin{macrocode}
        \svn@ifvalidrev{@svng@\svn@file @rev}%
          {%
            \@ifundefined{@svng@\svn@file @files}%
              {\svn@writefilerow{\the\svn@grouplevel}{\svn@file}}%
%    \end{macrocode}
% If subgroup only contains out of a TeX file with the same name print it as 
% file and only as subgroup otherwise. If the subgroup file list is empty the 
% subgroup was generated in error and is not printed at all.
%    \begin{macrocode}
              {\svn@ifonlyone{\svn@file}%
                {\svn@writefilerow{\the\svn@grouplevel}%
                  {\csname @svng@\svn@file @files\endcsname}}%
                {\svn@ifempty{\csname @svng@\svn@file @files\endcsname}%
                  {}%
                  {%
                    \svn@writesubgrouprow{\the\svn@grouplevel}{\svn@file}%
                    \svn@writegroupfiles{\svn@file}%
                  }%
                }%
              }%
          }{}%
      }%
    \fi
  \endgroup
}%
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\svn@writesvt}
% This macro writes the |.svt| auxiliary file and is called from a
% |\AtEndDocument| macro later on.
%    \begin{macrocode}
\def\svn@writesvt{%
%    \end{macrocode}
% Write table of revisions if enabled.
%    \begin{macrocode}
  \if@svnmulti@table
%    \end{macrocode}
% Open |.svt| file and write table header:
%    \begin{macrocode}
    \newwrite\svn@svtwrite
    \immediate\openout\svn@svtwrite=\jobname.\svn@svt\relax
    \@onelevel@sanitize\svntable%
    \immediate\write\svn@svtwrite{%
      \noexpand\svnbeforetable^^J%
      \svntable
      \noexpand\svntablehead^^J%
    }%
%    \end{macrocode}
% Group rows:
%    \begin{macrocode}
    \let\svn@grouplevel\@tempcnta
    \svn@grouplevel=0\relax
    \svn@writeglobalrow{}%
    \svn@writegroupfiles{}%
%
    \@for\svn@g:=\svn@glist\do{%
      \@ifundefined{@svng@\svn@g @rev}{}%
      {%
        \expandafter
        \ifnum\csname @svng@\svn@g @rev\endcsname>0\relax
          \svn@writegrouprow{\svn@g}%
          \svn@writegroupfiles{\svn@g}%
        \fi
      }%
    }%

%    \end{macrocode}
% Write table footer and close file:
%    \begin{macrocode}
    \@onelevel@sanitize\endsvntable%
    \immediate\write\svn@svtwrite{%
      \noexpand\svntablefoot^^J%
      \endsvntable^^J%
      \noexpand\svnaftertable
    }%
    \immediate\closeout\svn@svtwrite%
  \fi
}
%    \end{macrocode}
% \end{macro}

% Load the keywords of every subfile if the \opt{autokw} option is enabled and 
% the extension is not on the ignore list.
%
% This code is placed here because it has to come after the at-begin-input-file 
% code.
%     \begin{macrocode}
\if@svnmulti@autokwall

\AtBeginOfFiles{%
  \expandafter
  \ifx\csname svn@ignore@ext@\currfileext\endcsname\relax
    \svnegetfile{\currfilepath}%
  \fi
}

\fi
%    \end{macrocode}

% At the end of document the values are written to the auxiliary file.
%    \begin{macrocode}
\AtEndDocument{%
  \if@filesw
    \ifx\@svn@rev\empty\else
      \ifnum\@svn@rev<1\else
        \begingroup
        \let\protect\@unexpandable@protect
        \svn@writesvn
        \svn@writesvt
        \endgroup
      \fi
    \fi
  \fi
}
%    \end{macrocode}
%
